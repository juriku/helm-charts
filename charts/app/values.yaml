# Default values

## set number of desired replics per environment (will be overriden ih hpa is enabled (autoscaling))
replicaCount: 1

####
## This section defines any additional deployments to create (will create all that are enabled)
####
deployments:
  default:
    ## enables default deployment to be installed
    enabled: true
  ## add additional blue deployment
  # blue:
  #   enabled: true
  # green:
  #   ## disable green deployemnt - will not deploy it
  #   enabled: false
  #   ## Ovveride default values (will merge values from Values section)
  #   Values:
  #     ## override names to avoid errors and duplications
  #     fullnameOverride: ""
  #     image:
  #       tag: green

## set repository in the defaults.yaml 
image:
  ## has to be passed
  # repository: ""
  ## default pullPolicy is IfNotPresent, and if tag doesn't have a number(int) in it, then forced to Always
  pullPolicy: IfNotPresent
  ## default tag, pipeline should add latest tag when pushing to production
  ## tag will be passed automatically through pipeline
  tag: "latest"

## secret name for dockerconfigjson secret
# imagePullSecrets: ""

## you can override the name of your deployment, which will manifest in naming conventions of deployment
# fullnameOverride: ""

## you can override the name of your main container
# nameOverride: ""

## override main selector labels
# selectorLabels:
#   app: app-blue

## add labels to deployment metadata
# labelsDeployment:
#   key: value

## add extra annotations to pod metadata
# podAnnotations: {}

## default update strategy if HorizontalPodAutoscaler (autoscaling) is not enabled
## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 0

## define security context at pod level
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext: {}
  # fsGroup: 2000

## define security context at container level
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

## ref: https://cloud.google.com/kubernetes-engine/docs/how-to/container-native-load-balancing
# terminationGracePeriodSeconds: 180
# minReadySeconds: 10

## configure service
service:
  enabled: true
  ## override the service name (default is release name or Values.fullnameOverride)
  # name: service-name
  ## change type to NodePort if gce ingress (ClusterIP is better for Nginx ingress)
  type: ClusterIP
  # annotations:
  #   key: value
  # labels:
  #   key: value
  # loadBalancerIP: ""
  # externalTrafficPolicy: Local
  # ports:
    ## list of ports
    # http: 80
    # grpc: 8080
  ## if ports not defined, then containerPorts will be used. If none defined, then http: 80

## by default container Ports in deployment will be taken from Values.service.ports, use containerPorts to override
# containerPorts:
#   http: 8080

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 300
#   periodSeconds: 10
#   successThreshold: 1
#   timeoutSeconds: 5
#   failureThreshold: 3
# readinessProbe:
#   httpGet:
#     path: /actuator/health
#     port: http
#     scheme: HTTP
#   initialDelaySeconds: 15
#   periodSeconds: 10
#   successThreshold: 1
#   timeoutSeconds: 5
#   failureThreshold: 3

## specify service account
# serviceAccountName: sa-name

## https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
# automountServiceAccountToken:
#   enabled: false
## will result in:
## automountServiceAccountToken: false

## quick extra annotations for prometheus scrape config
## example: https://stackoverflow.com/questions/53365191/monitor-custom-kubernetes-pod-metrics-using-prometheus
## enable prometheus.io/scrape (boolean)
prometheusScrape: false
## define prometheus.io/port
prometheusScrapePort: http
## define prometheus.io/path
prometheusScrapePath: /actuator/prometheus

## enable HorizontalPodAutoscalers
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  # pubsub_subscription:
  # - subscription_id: "subscription"
  #   metric: "num_undelivered_messages"
  #   AverageValue: 200
  # cpu:
  # - type: Utilization
  #   averageUtilization: 50
  # memory:
  # - averageUtilization: 50

## enable keda
## ref: https://keda.sh/docs/2.3/concepts/scaling-deployments/
keda:
  enabled: false
  # envSourceContainerName: container-name             # Optional. Default: .spec.template.spec.containers[0]
  # pollingInterval: 30                                # Optional. Default: 30 seconds
  # cooldownPeriod:  300                               # Optional. Default: 300 seconds
  # minReplicaCount: 0                                 # Optional. Default: 0
  # maxReplicaCount: 100                               # Optional. Default: 100
  # advanced:                                          # Optional. Section to specify advanced options
  #   restoreToOriginalReplicaCount: true/false        # Optional. Default: false
  #   horizontalPodAutoscalerConfig:                   # Optional. Section to specify HPA related options
  #     behavior:                                      # Optional. Use to modify HPA's scaling behavior
  #       scaleDown:
  #         stabilizationWindowSeconds: 300
  #         policies:
  #         - type: Percent
  #           value: 100
  #           periodSeconds: 15
  # triggers:
  # - type: gcp-pubsub
  #   metadata:
  #     subscriptionSize: "5"
  #     subscriptionName: "audit-logs-subscription"
  #     credentialsFromEnv: "GOOGLE_APPLICATION_CREDENTIALS"
  ## or 
  #   authenticationRef:
  #       name: .Release.Name
  # secretTargetRef:
  # - parameter: GoogleApplicationCredentials # - Default is GoogleApplicationCredentials
  #   name: pubsub-secret        # Required. Refers to the name of the secret
  #   key: GOOGLE_APPLICATION_CREDENTIALS # Required - Default is GOOGLE_APPLICATION_CREDENTIALS

# ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
  enabled: false
  ## default minAvailable is taken from autoscaling.minReplicas if autoscaling enabled, otherwise from replicaCount 
  # minAvailable: ""

## ref: https://cloud.google.com/kubernetes-engine/docs/how-to/vertical-pod-autoscaling
verticalPodAutoscaler:
  enabled: false
  updateMode: "Off"

# nodeSelector: {}

# if no nodeSelector defined (in case there is a default nodeSelector needed for all apps)
# nodeSelectorDefault: {}

tolerations: []

# affinity: {}

## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
podAntiAffinity:
  enabled: false
  # hard for requiredDuringSchedulingIgnoredDuringExecution and soft for preferredDuringSchedulingIgnoredDuringExecution
  type: soft
  ## default topologies
  topology:
  - weight: 50
    topologyKey: "kubernetes.io/hostname"
  - weight: 100
    topologyKey: "failure-domain.beta.kubernetes.io/zone"

lifecycle: {}

# extraContainers:
#   container-name:
#     image:
#       ## if no image defined, then image from default container will be taken
#       repository: ""
#       pullPolicy: IfNotPresent
#       tag: ""
#     resources:
#     securityContext:
#     environment:
#       variables:
#     args:
#       - arg1
#     command:
#       - command
#     volumeMounts:
#     ## can define volumes at this point or at .Values.volumes
#     volumes:

# initContainers:
#   container-name:
#     image:
#       ## if no image defined, then image from default container will be taken
#       repository: ""
#       pullPolicy: IfNotPresent
#       tag: ""
#     resources:
#     securityContext:
#     environment:
#       variables:
#     args:
#       - arg1
#     command:
#       - command
#     volumeMounts:

## simple way to add variables
# environment:
#   variables:
#     SERVER_PORT: "3000"
#     NODE_ENV: "staging"
#   secretVariables:
#     VAR_NAME_IN_CONTAINER:
#       secretName: secret_name
#       dataKeyRef: SECRET_KEY_REFERENCE_NAME
#   configmapVariables:
#     VAR_NAME_IN_CONTAINER:
#       configmapName: configmap_name
#       dataKeyRef: CONFIGMAP_KEY_REFERENCE_NAME
#     VAR_NAME_IN_CONTAINER_2:
#       configmapName: configmap_name
#       dataKeyRef: CONFIGMAP_KEY_REFERENCE_NAME_2
## with metadata you can get info, lipe pod name, namespace, ip intot he variable. ref: https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/
#   metadata:
#     POD_NAME: metadata.name
## load env vars from configmap
#   envFromConfigMaps:
#     - shared-config

## to add volume mounts entries (follow https://kubernetes.io/docs/concepts/storage/volumes/ for syntax)
# volumes:
# - name: volume-name
#   secret:
#     defaultMode: 420
#     secretName: secret-name
# volumes:
#   - name: sa-firebase-labelling-tool
#     secret:
#       secretName: sa-firebase-labelling-tool
#       items:
#       - key: service.json
#         path: service.json

# volumeMounts:
#   - mountPath: /src/service.json
#       subPath: service.json
#     name: sa-firebase-labelling-tool
#     readOnly: true

## ingress configuration
ingress:
  ## to enable - switch to true
  enabled: false
  class: nginx
  annotations: {}
    # kubernetes.io/tls-acme: "true"
  ## to override default dackend
  # backend:
  #   serviceName: default-http-backend
  #   servicePort: 80
  hosts: {}
    # - host: chart-example.local
    ## by default serviceName will be taken from Release Name or Values.fullnameOverride , to override add:
    #   serviceName: service_name
    ## by default servicePort will be taken from Values.service.ports (http or first in the list), otherwise from containerPorts, to override add:
    #   servicePort: 8080
    # - host: chart-example-2.local
    #   serviceName: service_name_2
    #   servicePort: 8080
  tls: []
  ## tls section will be automatically generated, to override add:
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
## to override default tls secret name add:
# tls:
#   default: default-tls-secret-name

## creating secrets:
# secrets:
#     encoded:
#     -   name: sa-credentials
#         values:
#             service.json: BASE64_VALUE
#     decoded:
#     -   name: secret-values
#         values:
#             KEY_NAME1: DECODED_VALUE
#             KEY_NAME2: DECODED_VALUE
#     -   name: secret-values2
#         values:
#             KEY_NAME3: DECODED_VALUE

## creating configmaps
# configmaps:
#   - name: configmap_name
#     values:
#       KEY1: VALUE
#       KEY2: VALUE
#     valuesMultiLine:
#       config.json: |-
#         {
#           "key": value
#         }

## Argo CD rollouts
## ref: https://argoproj.github.io/argo-rollouts/migrating/
## ref spec: https://argoproj.github.io/argo-rollouts/features/specification/

## ref: https://argoproj.github.io/argo-rollouts/migrating/#convert-deployment-to-rollout
## change apiVersion and kind to Convert Deployment to Rollout
# apiVersion: argoproj.io/v1alpha1
# kind: Rollout

argo:
  rollouts:
    enabled: false
    ## ref: https://argoproj.github.io/argo-rollouts/migrating/#convert-deployment-to-rollout
    ## changing apiVersion and kind to Convert Deployment to Rollout
    type: Deployment
    ## https://argoproj.github.io/argo-rollouts/migrating/#reference-deployment-from-rollout
    ## Reference Deployment From Rollout (true)
    ## type: workloadRef
    apiVersion: argoproj.io/v1alpha1
    kind: Rollout
    strategy: {}
      # canary:
      #   steps:
      #     - setWeight: 20
      #     - pause: {duration: 10s}
      # blueGreen:
      #   activeService: devops-demo
      #   previewService: devops-demo-preview
      #   prePromotionAnalysis:
      #     templates:
      #     - templateName: app
  analysis:
    enabled: false
    # # Optional
    # name: foobar
    # # --
    # metrics:
    #   - name: e2e-test
    #     failureLimit: 0
    #     provider:
    #       job:
    #         spec:
    #           template:
    #             spec:
    #               containers:
    #               - name: sleep
    #                 image: alpine:3.12
    #                 command: [sh, -c]
    #                 args: [nc -vvvv devops-demo-preview 80]
    #               restartPolicy: Never
    #           backoffLimit: 0
    #     count: 1
